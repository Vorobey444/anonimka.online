// –†–∞–±–æ—á–∞—è Edge Function –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö SMTP –±–∏–±–ª–∏–æ—Ç–µ–∫
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, prefer',
  'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE',
}

serve(async (req) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight CORS –∑–∞–ø—Ä–æ—Å–∞
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { senderEmail, subject, message } = await req.json()
    
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', { senderEmail, subject, message })
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!senderEmail || !message) {
      console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞')
      return new Response(
        JSON.stringify({ 
          success: false,
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: senderEmail, message' 
        }), 
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    if (message.length < 10) {
      return new Response(
        JSON.stringify({ 
          success: false,
          error: '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ' 
        }), 
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      )
    }

    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞')

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ Telegram Bot API
    const telegramBotToken = "7185550869:AAHlXLfAIzKgH4I7bHAvqwHsa4K-nc9y8x4"
    const telegramChatId = "1296477754" // –≤–∞—à chat_id
    
    const telegramMessage = `üî• –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å anonimka.online

üìß –û—Ç: ${senderEmail}
üìù –¢–µ–º–∞: ${subject || '–ë–µ–∑ —Ç–µ–º—ã'}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
${message}

---
–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Å–∞–π—Ç–∞ anonimka.online
–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${senderEmail}`

    const telegramUrl = `https://api.telegram.org/bot${telegramBotToken}/sendMessage`
    
    const telegramResponse = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: telegramChatId,
        text: telegramMessage,
        parse_mode: 'HTML'
      })
    })

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.text()
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', errorData)
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram')
    }

    const result = await telegramResponse.json()
    console.log('‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram:', result)

    return new Response(
      JSON.stringify({ 
        success: true, 
        message: '–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram',
        id: result.message_id
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏:', error)
    return new Response(
      JSON.stringify({ 
        success: false,
        error: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}` 
      }), 
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})