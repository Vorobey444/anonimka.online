// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand();

// –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
let formData = {};
let currentStep = 1;
const totalSteps = 8;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initializeTelegramWebApp();
    setupEventListeners();
    loadAds();
});

function initializeTelegramWebApp() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    tg.setHeaderColor('#0a0a0f');
    tg.setBackgroundColor('#0a0a0f');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    tg.MainButton.setText('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    tg.MainButton.onClick(() => showMainMenu());
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    tg.BackButton.onClick(() => handleBackButton());
    
    console.log('Telegram Web App initialized');
}

function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    document.querySelectorAll('.city-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            if (this.classList.contains('filter')) {
                handleCityFilter(this.dataset.city);
            } else {
                selectCity(this.dataset.city);
            }
        });
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    document.querySelectorAll('.gender-btn').forEach(btn => {
        btn.addEventListener('click', () => selectGender(btn.dataset.gender));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –ø–æ–∏—Å–∫–∞
    document.querySelectorAll('.target-btn').forEach(btn => {
        btn.addEventListener('click', () => selectTarget(btn.dataset.target));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
    document.querySelectorAll('.goal-btn').forEach(btn => {
        btn.addEventListener('click', () => selectGoal(btn.dataset.goal));
    });

    // –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è
    document.querySelectorAll('.body-btn').forEach(btn => {
        btn.addEventListener('click', () => selectBody(btn.dataset.body));
    });

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –≥–æ—Ä–æ–¥
    document.getElementById('customCity').addEventListener('input', function() {
        if (this.value.trim()) {
            clearCitySelection();
            formData.city = this.value.trim();
        }
    });
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ Telegram
    updateTelegramButtons(screenId);
}

function updateTelegramButtons(screenId) {
    switch(screenId) {
        case 'mainMenu':
            tg.BackButton.hide();
            tg.MainButton.hide();
            break;
        case 'createAd':
            tg.BackButton.show();
            tg.MainButton.hide();
            break;
        case 'browseAds':
            tg.BackButton.show();
            tg.MainButton.hide();
            break;
        case 'adDetails':
            tg.BackButton.show();
            tg.MainButton.hide();
            break;
    }
}

function handleBackButton() {
    const activeScreen = document.querySelector('.screen.active').id;
    
    switch(activeScreen) {
        case 'createAd':
            showMainMenu();
            break;
        case 'browseAds':
            showMainMenu();
            break;
        case 'adDetails':
            showBrowseAds();
            break;
        default:
            showMainMenu();
    }
}

function showMainMenu() {
    showScreen('mainMenu');
    resetForm();
}

function showCreateAd() {
    showScreen('createAd');
    currentStep = 1;
    showStep(1);
}

function showBrowseAds() {
    showScreen('browseAds');
    loadAds();
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞–º–∏ —Ñ–æ—Ä–º—ã
function showStep(step) {
    document.querySelectorAll('.form-step').forEach(s => s.classList.remove('active'));
    document.getElementById(`step${step}`).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    
    prevBtn.style.display = step > 1 ? 'block' : 'none';
    nextBtn.style.display = step < totalSteps ? 'block' : 'none';
    submitBtn.style.display = step === totalSteps ? 'block' : 'none';
}

function nextStep() {
    if (validateCurrentStep()) {
        if (currentStep < totalSteps) {
            currentStep++;
            showStep(currentStep);
        }
    }
}

function previousStep() {
    if (currentStep > 1) {
        currentStep--;
        showStep(currentStep);
    }
}

function validateCurrentStep() {
    switch(currentStep) {
        case 1:
            return formData.city || document.getElementById('customCity').value.trim();
        case 2:
            return formData.gender;
        case 3:
            return formData.target;
        case 4:
            return formData.goal;
        case 5:
            const ageFrom = document.getElementById('ageFrom').value;
            const ageTo = document.getElementById('ageTo').value;
            if (ageFrom && ageTo) {
                formData.ageFrom = ageFrom;
                formData.ageTo = ageTo;
                return true;
            }
            return false;
        case 6:
            const myAge = document.getElementById('myAge').value;
            if (myAge) {
                formData.myAge = myAge;
                return true;
            }
            return false;
        case 7:
            return formData.body;
        case 8:
            const adText = document.getElementById('adText').value.trim();
            if (adText) {
                formData.text = adText;
                return true;
            }
            return false;
    }
    return false;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞
function selectCity(city) {
    clearCitySelection();
    formData.city = city;
    document.querySelector(`[data-city="${city}"]:not(.filter)`).classList.add('selected');
    document.getElementById('customCity').value = '';
}

function clearCitySelection() {
    document.querySelectorAll('.city-btn:not(.filter)').forEach(btn => {
        btn.classList.remove('selected');
    });
}

function selectGender(gender) {
    document.querySelectorAll('.gender-btn').forEach(btn => btn.classList.remove('selected'));
    document.querySelector(`[data-gender="${gender}"]`).classList.add('selected');
    formData.gender = gender;
}

function selectTarget(target) {
    document.querySelectorAll('.target-btn').forEach(btn => btn.classList.remove('selected'));
    document.querySelector(`[data-target="${target}"]`).classList.add('selected');
    formData.target = target;
}

function selectGoal(goal) {
    document.querySelectorAll('.goal-btn').forEach(btn => btn.classList.remove('selected'));
    document.querySelector(`[data-goal="${goal}"]`).classList.add('selected');
    formData.goal = goal;
}

function selectBody(body) {
    document.querySelectorAll('.body-btn').forEach(btn => btn.classList.remove('selected'));
    document.querySelector(`[data-body="${body}"]`).classList.add('selected');
    formData.body = body;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async function submitAd() {
    if (!validateCurrentStep()) {
        tg.showAlert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }

    try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const adData = {
            ...formData,
            userId: tg.initDataUnsafe?.user?.id || 'anonymous',
            timestamp: Date.now()
        };

        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', adData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
        tg.sendData(JSON.stringify({
            action: 'createAd',
            data: adData
        }));

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
        tg.showAlert('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', () => {
            showMainMenu();
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async function loadAds() {
    try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É –±–æ—Ç–∞
        tg.sendData(JSON.stringify({
            action: 'getAds'
        }));

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', error);
    }
}

function displayAds(ads, city = null) {
    const adsList = document.getElementById('adsList');
    
    if (!ads || ads.length === 0) {
        adsList.innerHTML = `
            <div class="no-ads">
                <div class="neon-icon">üòî</div>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π</h3>
                <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!</p>
            </div>
        `;
        return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    const filteredAds = city ? ads.filter(ad => ad.city === city) : ads;

    adsList.innerHTML = filteredAds.map((ad, index) => `
        <div class="ad-card" onclick="showAdDetails(${index})">
            <div class="ad-info">
                <div class="ad-field">
                    <span class="icon">üèô</span>
                    <span class="label">–ì–æ—Ä–æ–¥:</span>
                    <span class="value">${ad.city}</span>
                </div>
                <div class="ad-field">
                    <span class="icon">üë§</span>
                    <span class="label">–ü–æ–ª:</span>
                    <span class="value">${ad.gender}</span>
                </div>
                <div class="ad-field">
                    <span class="icon">üîç</span>
                    <span class="label">–ò—â–µ—Ç:</span>
                    <span class="value">${ad.target}</span>
                </div>
                <div class="ad-field">
                    <span class="icon">üéØ</span>
                    <span class="label">–¶–µ–ª—å:</span>
                    <span class="value">${ad.goal}</span>
                </div>
                <div class="ad-field">
                    <span class="icon">üéÇ</span>
                    <span class="label">–í–æ–∑—Ä–∞—Å—Ç:</span>
                    <span class="value">${ad.myAge} –ª–µ—Ç</span>
                </div>
            </div>
            <div class="ad-text">
                "${ad.text.substring(0, 100)}${ad.text.length > 100 ? '...' : ''}"
            </div>
        </div>
    `).join('');
}

function handleCityFilter(city) {
    // –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞
    document.querySelectorAll('.city-btn.filter').forEach(btn => {
        btn.classList.remove('selected');
    });

    // –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    document.querySelector(`[data-city="${city}"].filter`).classList.add('selected');

    // –ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É
    tg.sendData(JSON.stringify({
        action: 'getAdsByCity',
        city: city
    }));
}

function showAdDetails(index) {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –¥–µ—Ç–∞–ª–µ–π
    showScreen('adDetails');
}

function contactAuthor() {
    tg.showAlert('–§—É–Ω–∫—Ü–∏—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
}

// –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
function resetForm() {
    formData = {};
    currentStep = 1;
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤
    document.querySelectorAll('.selected').forEach(el => {
        el.classList.remove('selected');
    });
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
    document.getElementById('customCity').value = '';
    document.getElementById('ageFrom').value = '';
    document.getElementById('ageTo').value = '';
    document.getElementById('myAge').value = '';
    document.getElementById('adText').value = '';
    
    showStep(1);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞
tg.onEvent('web_app_data_received', function(data) {
    try {
        const response = JSON.parse(data);
        
        switch(response.action) {
            case 'adsLoaded':
                displayAds(response.ads);
                break;
            case 'cityAdsLoaded':
                displayAds(response.ads, response.city);
                break;
            case 'adCreated':
                tg.showAlert('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!');
                showMainMenu();
                break;
            default:
                console.log('Unknown response:', response);
        }
    } catch (error) {
        console.error('Error parsing bot data:', error);
    }
});

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.debugApp = {
    formData: () => console.log(formData),
    currentStep: () => console.log(currentStep),
    tg: () => console.log(tg)
};