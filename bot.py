"""
–ë–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —á–∞—Ç
- User A –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebApp
- User B –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
- –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ª—é–±–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
"""

import logging
import aiohttp
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8105244538:AAFosyTcD8uPuwArnYgBO-IVeSThzuxbLhY"
API_BASE_URL = "https://anonimka.kz"

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
# sent_messages[sender_id][ad_id] = True - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# chat_invites[invite_id] = {sender, recipient, ad_id, message, timestamp}
# active_chats[chat_id] = {user1, user2, ad_id, created_at, blocked_by: None/user_id}
# user_chats[user_id] = [chat_id1, chat_id2, ...]


# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =====

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"), KeyboardButton("üí¨ –ú–æ–∏ —á–∞—Ç—ã")],
        [KeyboardButton("üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    menu_text = (
        "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n"
        "üí¨ –ú–æ–∏ —á–∞—Ç—ã - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n"
        "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏\n"
        "‚ùì –ü–æ–º–æ—â—å - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )
    
    await update.message.reply_text(
        menu_text,
        reply_markup=get_main_menu_keyboard()
    )


async def handle_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    if not update.message or not update.message.text:
        return
    
    text = update.message.text
    user_id = update.message.from_user.id
    
    if text == "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ":
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º WebApp
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app=WebAppInfo(url=f"{API_BASE_URL}/webapp/"))]
        ])
        await update.message.reply_text(
            "üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )
    
    elif text == "üí¨ –ú–æ–∏ —á–∞—Ç—ã":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        await my_chats(update, context)
    
    elif text == "üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" –≤ WebApp
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—å –º–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", web_app=WebAppInfo(url=f"{API_BASE_URL}/webapp/#myads"))]
        ])
        await update.message.reply_text(
            "üìã –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏:",
            reply_markup=keyboard
        )
    
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        help_text = (
            "‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
            "üåê –°–∞–π—Ç: anonimka.kz\n\n"
            "üìù –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'\n"
            "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n"
            "3. –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!\n\n"
            "üí¨ –ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É:\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É'\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "4. –ê–≤—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å\n"
            "5. –û–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç\n\n"
            "üîí –í–∞—à–∏ —á–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω—ã\n"
            "üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /block —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/mychats - –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤\n"
            "/block - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç"
        )
        await update.message.reply_text(help_text)


# ===== –ö–û–ú–ê–ù–î–ê START =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if not update.message or not update.message.from_user:
        return
        
    user_id = update.message.from_user.id
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è QR-–∫–æ–¥–∞)
    if context.args and len(context.args) > 0:
        auth_param = context.args[0]
        
        # –ï—Å–ª–∏ —ç—Ç–æ auth token –∏–∑ QR-–∫–æ–¥–∞
        if auth_param.startswith('auth_'):
            logger.info(f"QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, token: {auth_param}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'id': user_id,
                'first_name': user.first_name or '',
                'last_name': user.last_name or '',
                'username': user.username or '',
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"{API_BASE_URL}/api/auth",
                        json={'token': auth_param, 'user': user_data},
                        timeout=aiohttp.ClientTimeout(total=5)
                    ) as response:
                        if response.status == 200:
                            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {auth_param}")
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {response.status}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                f"üë§ {user.first_name}\n"
                f"üíª –û–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                f"üåê –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –≤ Telegram\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∞–π—Ç–æ–º –∫–∞–∫ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Ç–∞–∫ –∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –≤ Telegram", web_app=WebAppInfo(url=f"{API_BASE_URL}/webapp/"))]
                ])
            )
            
            logger.info(f"QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {user_id}, –¥–∞–Ω–Ω—ã–µ: {user_data}")
            return
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
    if 'sent_messages' not in context.bot_data:
        context.bot_data['sent_messages'] = {}
    if 'chat_invites' not in context.bot_data:
        context.bot_data['chat_invites'] = {}
    if 'active_chats' not in context.bot_data:
        context.bot_data['active_chats'] = {}
    if 'user_chats' not in context.bot_data:
        context.bot_data['user_chats'] = {}
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    welcome_message = (
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n"
        "üåç –°–∞–π—Ç: anonimka.kz\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá"
    )
    
    try:
        await update.message.reply_text(
            welcome_message,
            reply_markup=get_main_menu_keyboard()
        )
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# ===== –û–¢–ü–†–ê–í–ö–ê –ü–ï–†–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø =====

async def send_first_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç User A –∫ User B —á–µ—Ä–µ–∑ WebApp
    –§–æ—Ä–º–∞—Ç callback: first_msg_{ad_id}_{author_tg_id}_{message_text}
    –ò–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —á–µ—Ä–µ–∑ WebApp.data
    """
    query = update.callback_query
    if query:
        await query.answer()
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ callback
        try:
            parts = query.data.split('_', 3)
            if len(parts) < 4:
                await context.bot.send_message(query.from_user.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
                return
            
            ad_id = parts[1]
            author_tg_id = int(parts[2])
            message_text = parts[3]
            sender_tg_id = query.from_user.id
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback: {e}")
            return
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ WebApp data
        if not update.message or not update.message.web_app_data:
            return
        
        import json
        try:
            data = json.loads(update.message.web_app_data.data)
            ad_id = data.get('ad_id')
            author_tg_id = int(data.get('author_tg_id'))
            message_text = data.get('message')
            sender_tg_id = update.message.from_user.id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebApp data: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
            return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –ø–∏—Å–∞—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ
    if sender_tg_id == author_tg_id:
        msg = "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–∏ —Å–µ–±–µ"
        if query:
            await context.bot.send_message(sender_tg_id, msg)
        else:
            await update.message.reply_text(msg)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â
    if 'sent_messages' not in context.bot_data:
        context.bot_data['sent_messages'] = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    if sender_tg_id not in context.bot_data['sent_messages']:
        context.bot_data['sent_messages'][sender_tg_id] = {}
    
    if ad_id in context.bot_data['sent_messages'][sender_tg_id]:
        msg = "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
        if query:
            await context.bot.send_message(sender_tg_id, msg)
        else:
            await update.message.reply_text(msg)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    context.bot_data['sent_messages'][sender_tg_id][ad_id] = True
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite_id = f"invite_{sender_tg_id}_{author_tg_id}_{ad_id}_{datetime.now().timestamp()}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    if 'chat_invites' not in context.bot_data:
        context.bot_data['chat_invites'] = {}
    
    context.bot_data['chat_invites'][invite_id] = {
        'sender': sender_tg_id,
        'recipient': author_tg_id,
        'ad_id': ad_id,
        'message': message_text,
        'timestamp': datetime.now().isoformat()
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{invite_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{invite_id}")
        ]
    ])
    
    try:
        await context.bot.send_message(
            author_tg_id,
            f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id}!\n\n"
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message_text}\n\n"
            f"–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç?",
            reply_markup=keyboard
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        confirmation = (
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∞–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç."
        )
        if query:
            await context.bot.send_message(sender_tg_id, confirmation)
        else:
            await update.message.reply_text(confirmation)
        
        logger.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invite_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç {sender_tg_id} –∫ {author_tg_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
        msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
        if query:
            await context.bot.send_message(sender_tg_id, msg)
        else:
            await update.message.reply_text(msg)


# ===== –ü–†–ò–ù–Ø–¢–ò–ï/–û–¢–ö–õ–û–ù–ï–ù–ò–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø =====

async def accept_invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    await query.answer()
    
    invite_id = query.data.replace("accept_", "")
    chat_invites = context.bot_data.get('chat_invites', {})
    
    if invite_id not in chat_invites:
        await context.bot.send_message(query.from_user.id, "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return
    
    invite = chat_invites[invite_id]
    sender_id = invite['sender']
    recipient_id = invite['recipient']
    ad_id = invite['ad_id']
    first_message = invite['message']
    
    # –°–æ–∑–¥–∞–µ–º —á–∞—Ç
    chat_id = f"{min(sender_id, recipient_id)}_{max(sender_id, recipient_id)}_{ad_id}"
    
    if 'active_chats' not in context.bot_data:
        context.bot_data['active_chats'] = {}
    if 'user_chats' not in context.bot_data:
        context.bot_data['user_chats'] = {}
    
    context.bot_data['active_chats'][chat_id] = {
        'user1': sender_id,
        'user2': recipient_id,
        'ad_id': ad_id,
        'created_at': datetime.now().isoformat(),
        'blocked_by': None
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in [sender_id, recipient_id]:
        if user_id not in context.bot_data['user_chats']:
            context.bot_data['user_chats'][user_id] = []
        if chat_id not in context.bot_data['user_chats'][user_id]:
            context.bot_data['user_chats'][user_id].append(chat_id)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    del chat_invites[invite_id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
    await context.bot.send_message(
        recipient_id,
        f"‚úÖ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{ad_id}\n"
        f"ÔøΩ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {first_message}\n\n"
        f"üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/mychats - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
        f"/block - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    try:
        await context.bot.send_message(
            sender_id,
            f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –ø—Ä–∏–Ω—è—Ç!\n\n"
            f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{ad_id}\n\n"
            f"üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/mychats - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
            f"/block - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {e}")
    
    logger.info(f"–ß–∞—Ç {chat_id} —Å–æ–∑–¥–∞–Ω –º–µ–∂–¥—É {sender_id} –∏ {recipient_id}")


async def create_chat_from_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (callback –æ—Ç API)
    –§–æ—Ä–º–∞—Ç: create_chat_{ad_id}_{sender_tg_id}
    """
    query = update.callback_query
    if not query or not query.data:
        return
    
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data: create_chat_{ad_id}_{sender_tg_id}
        parts = query.data.split('_')
        if len(parts) < 4:
            await context.bot.send_message(query.from_user.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return
        
        ad_id = parts[2]
        sender_id = int(parts[3])
        recipient_id = query.from_user.id  # –ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
        if sender_id == recipient_id:
            await context.bot.send_message(recipient_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —á–∞—Ç–∞
        chat_id = f"{min(sender_id, recipient_id)}_{max(sender_id, recipient_id)}_{ad_id}"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â
        if 'active_chats' not in context.bot_data:
            context.bot_data['active_chats'] = {}
        if 'user_chats' not in context.bot_data:
            context.bot_data['user_chats'] = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —á–∞—Ç
        if chat_id in context.bot_data['active_chats']:
            existing_chat = context.bot_data['active_chats'][chat_id]
            if existing_chat.get('blocked_by'):
                await context.bot.send_message(
                    recipient_id, 
                    "‚ùå –≠—Ç–æ—Ç —á–∞—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—â–µ–Ω–∏–µ."
                )
                return
            else:
                await context.bot.send_message(
                    recipient_id,
                    f"‚úÖ –ß–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                    f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{ad_id}\n\n"
                    f"üí¨ –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ.\n\n"
                    f"–ö–æ–º–∞–Ω–¥—ã:\n"
                    f"/mychats - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
                    f"/block - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
                )
                return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        context.bot_data['active_chats'][chat_id] = {
            'user1': sender_id,
            'user2': recipient_id,
            'ad_id': ad_id,
            'created_at': datetime.now().isoformat(),
            'blocked_by': None
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in [sender_id, recipient_id]:
            if user_id not in context.bot_data['user_chats']:
                context.bot_data['user_chats'][user_id] = []
            if chat_id not in context.bot_data['user_chats'][user_id]:
                context.bot_data['user_chats'][user_id].append(chat_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ø–æ–ª—É—á–∞—Ç–µ–ª—è)
        await context.bot.send_message(
            recipient_id,
            f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ: #{ad_id}\n\n"
            f"üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω–æ.\n"
            f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.\n\n"
            f"–ö–æ–º–∞–Ω–¥—ã:\n"
            f"/mychats - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
            f"/block - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                sender_id,
                f"‚úÖ –ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad_id} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n\n"
                f"üí¨ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.\n"
                f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                f"–ö–æ–º–∞–Ω–¥—ã:\n"
                f"/mychats - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
                f"/block - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {sender_id}: {e}")
        
        logger.info(f"–ß–∞—Ç {chat_id} —Å–æ–∑–¥–∞–Ω –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–∂–¥—É {sender_id} –∏ {recipient_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await context.bot.send_message(query.from_user.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def decline_invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç"""
    query = update.callback_query
    if not query or not query.data:
        return
    
    await query.answer()
    
    invite_id = query.data.replace("decline_", "")
    chat_invites = context.bot_data.get('chat_invites', {})
    
    if invite_id not in chat_invites:
        await context.bot.send_message(query.from_user.id, "‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return
    
    invite = chat_invites[invite_id]
    sender_id = invite['sender']
    ad_id = invite['ad_id']
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    del chat_invites[invite_id]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑
    if sender_id in context.bot_data.get('sent_messages', {}):
        if ad_id in context.bot_data['sent_messages'][sender_id]:
            del context.bot_data['sent_messages'][sender_id][ad_id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await context.bot.send_message(
        query.from_user.id,
        f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω"
    )
    
    # –ù–ï —É–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ (–¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏)
    logger.info(f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invite_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")




# ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ê–¢–ê–ú–ò =====

async def my_chats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not update.message or not update.message.from_user:
        return
    
    user_id = update.message.from_user.id
    user_chat_ids = context.bot_data.get('user_chats', {}).get(user_id, [])
    active_chats_data = context.bot_data.get('active_chats', {})
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
    active_chats = []
    for chat_id in user_chat_ids:
        if chat_id in active_chats_data:
            chat = active_chats_data[chat_id]
            if not chat.get('blocked_by'):
                active_chats.append((chat_id, chat))
    
    if not active_chats:
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π üëá",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    message = f"üí¨ –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(active_chats)}):\n\n"
    
    for chat_id, chat in active_chats:
        ad_id = chat.get('ad_id', 'N/A')
        message += f"üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}\n"
        message += f"   –ß–∞—Ç ID: `{chat_id}`\n\n"
    
    message += "\nüí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è."
    
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())


async def block_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ —á–∞—Ç–µ"""
    if not update.message or not update.message.from_user:
        return
    
    user_id = update.message.from_user.id
    user_chat_ids = context.bot_data.get('user_chats', {}).get(user_id, [])
    active_chats_data = context.bot_data.get('active_chats', {})
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
    available_chats = []
    for chat_id in user_chat_ids:
        if chat_id in active_chats_data:
            chat = active_chats_data[chat_id]
            if not chat.get('blocked_by'):
                available_chats.append((chat_id, chat))
    
    if not available_chats:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        return
    
    # –ï—Å–ª–∏ –æ–¥–∏–Ω —á–∞—Ç - –±–ª–æ–∫–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
    if len(available_chats) == 1:
        chat_id, chat = available_chats[0]
        await _block_chat(update, context, user_id, chat_id, chat)
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    keyboard = []
    for chat_id, chat in available_chats:
        ad_id = chat.get('ad_id', 'N/A')
        keyboard.append([
            InlineKeyboardButton(
                f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id}",
                callback_data=f"block_{chat_id}"
            )
        ])
    
    await update.message.reply_text(
        "–ö–∞–∫–æ–π —á–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def block_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    chat_id = query.data.replace("block_", "")
    user_id = query.from_user.id
    
    active_chats = context.bot_data.get('active_chats', {})
    
    if chat_id not in active_chats:
        await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    chat = active_chats[chat_id]
    await _block_chat(update, context, user_id, chat_id, chat, is_callback=True)


async def _block_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, chat_id: str, chat: dict, is_callback: bool = False):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞"""
    # –ü–æ–º–µ—á–∞–µ–º —á–∞—Ç –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    chat['blocked_by'] = user_id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    other_user_id = chat['user2'] if user_id == chat['user1'] else chat['user1']
    ad_id = chat.get('ad_id', 'N/A')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    message = f"üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —á–∞—Ç –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id}"
    
    if is_callback and update.callback_query:
        await context.bot.send_message(user_id, message)
    elif update.message:
        await update.message.reply_text(message)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    try:
        await context.bot.send_message(
            other_user_id,
            f"ÔøΩ –ß–∞—Ç –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id} –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
    
    logger.info(f"–ß–∞—Ç {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")


# ===== –û–ë–ú–ï–ù –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò =====

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"""
    if not update.message or not update.message.text or not update.message.from_user:
        return
    
    user_id = update.message.from_user.id
    message_text = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_chat_ids = context.bot_data.get('user_chats', {}).get(user_id, [])
    active_chats_data = context.bot_data.get('active_chats', {})
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
    available_chats = []
    for chat_id in user_chat_ids:
        if chat_id in active_chats_data:
            chat = active_chats_data[chat_id]
            if not chat.get('blocked_by'):
                available_chats.append((chat_id, chat))
    
    if not available_chats:
        # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
        await update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π üëá",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=f"{API_BASE_URL}/webapp/"))]
            ])
        )
        return
    
    # –ï—Å–ª–∏ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    if len(available_chats) == 1:
        chat_id, chat = available_chats[0]
        await _send_message_to_chat(context, user_id, chat_id, chat, message_text)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    if 'pending_messages' not in context.bot_data:
        context.bot_data['pending_messages'] = {}
    
    context.bot_data['pending_messages'][user_id] = message_text
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
    keyboard = []
    for chat_id, chat in available_chats:
        ad_id = chat.get('ad_id', 'N/A')
        keyboard.append([
            InlineKeyboardButton(
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id}",
                callback_data=f"sendto_{chat_id}"
            )
        ])
    
    await update.message.reply_text(
        "üí¨ –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def send_to_chat_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞-–ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    user_id = query.from_user.id
    chat_id = query.data.replace("sendto_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    pending_messages = context.bot_data.get('pending_messages', {})
    message_text = pending_messages.get(user_id)
    
    if not message_text:
        await context.bot.send_message(user_id, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    active_chats = context.bot_data.get('active_chats', {})
    
    if chat_id not in active_chats:
        await context.bot.send_message(user_id, "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    chat = active_chats[chat_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —á–∞—Ç
    if chat.get('blocked_by'):
        await context.bot.send_message(user_id, "‚ùå –≠—Ç–æ—Ç —á–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await _send_message_to_chat(context, user_id, chat_id, chat, message_text)
    await context.bot.send_message(user_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    del pending_messages[user_id]


async def _send_message_to_chat(context: ContextTypes.DEFAULT_TYPE, sender_id: int, chat_id: str, chat: dict, message_text: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient_id = chat['user2'] if sender_id == chat['user1'] else chat['user1']
    ad_id = chat.get('ad_id', 'N/A')
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await context.bot.send_message(
            recipient_id,
            f"üí¨ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}):\n\n{message_text}"
        )
        
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç {sender_id} –∫ {recipient_id} –≤ —á–∞—Ç–µ {chat_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏



# ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —á–∞—Ç...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mychats", my_chats))
    app.add_handler(CommandHandler("block", block_user))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(create_chat_from_notification, pattern=r"^create_chat_"))
    app.add_handler(CallbackQueryHandler(accept_invite, pattern=r"^accept_"))
    app.add_handler(CallbackQueryHandler(decline_invite, pattern=r"^decline_"))
    app.add_handler(CallbackQueryHandler(block_callback, pattern=r"^block_"))
    app.add_handler(CallbackQueryHandler(send_to_chat_callback, pattern=r"^sendto_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, send_first_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    app.add_handler(MessageHandler(
        filters.Regex(r"^(üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ|üí¨ –ú–æ–∏ —á–∞—Ç—ã|üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è|‚ùì –ü–æ–º–æ—â—å)$"), 
        handle_menu_buttons
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —á–∞—Ç–æ–≤)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    logger.info("  /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    logger.info("  /mychats - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
    logger.info("  /block - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()


if __name__ == "__main__":
    main()
