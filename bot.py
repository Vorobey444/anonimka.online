import sys
import traceback
from types import TracebackType

def global_excepthook(exc_type: type, exc_value: BaseException, exc_tb: TracebackType) -> None:
    traceback.print_exception(exc_type, exc_value, exc_tb)
    sys.exit(1)
sys.excepthook = global_excepthook

async def contact_author(update: 'Update', context: 'ContextTypes.DEFAULT_TYPE') -> None:
    query = update.callback_query
    if not query or not getattr(query, 'data', None) or not getattr(query, 'from_user', None):
        return
    await query.answer()
    try:
        idx = int(query.data.split('_')[1])
    except Exception:
        return
    ad = ads[idx]
    author_id = ad.get('user_id')
    user_id = query.from_user.id
    if str(author_id) == str(user_id):
        if getattr(query, 'message', None):
            await query.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–µ–±–µ.")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    if 'chats' not in context.bot_data:
        context.bot_data['chats'] = {}
    context.bot_data['chats'][(user_id, author_id)] = True
    if getattr(query, 'message', None):
        await query.message.reply_text("–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç, –∏ –±–æ—Ç –ø–µ—Ä–µ–¥–∞—Å—Ç –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.")
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler

# ...existing code...

async def relay_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    user_id = update.message.from_user.id if update.message.from_user else None
    chats = context.bot_data.get('chats', {})
    # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    for (from_id, to_id), active in chats.items():
        if active and user_id == from_id:
            # –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            try:
                await context.bot.send_message(to_id, f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
                await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è!")
            except Exception:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        elif active and user_id == to_id:
            # –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–µ–º—É—Å—è
            try:
                await context.bot.send_message(from_id, f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
                await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É!")
            except Exception:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
from telegram.ext import CallbackQueryHandler
# ...existing code...
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import requests

TOKEN = "8400755138:AAGG-yNvQknz60IXM7xVHeN-xNtzjHFTG1U"
API_BASE_URL = "https://anonimka.online"  # URL –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞


logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


ASK_CITY, ASK_GENDER, ASK_TARGET, ASK_GOAL, ASK_AGE, ASK_BODY, ASK_TEXT = range(7)
from typing import List, Dict
ads: List[Dict[str, str]] = []

import difflib
CITIES = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
GENDERS = ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]
TARGETS = ["–ú—É–∂—á–∏–Ω—É", "–ñ–µ–Ω—â–∏–Ω—É", "–ü–∞—Ä—É"]
GOALS = ["–î—Ä—É–∂–±–∞", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–û–±—â–µ–Ω–∏–µ", "–°–µ–∫—Å", "–î—Ä—É–≥–æ–µ"]
BODY_TYPES = ["–°—Ç—Ä–æ–π–Ω–æ–µ", "–û–±—ã—á–Ω–æ–µ", "–ü–ª–æ—Ç–Ω–æ–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ", "–î—Ä—É–≥–æ–µ"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"start: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(update.message, 'text', None)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ auth_token –≤ /start –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
    if context.args and len(context.args) > 0:
        auth_token = context.args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if auth_token.startswith('auth_'):
            user = update.message.from_user
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = {
                'id': user.id,
                'first_name': user.first_name,
                'last_name': user.last_name if user.last_name else '',
                'username': user.username if user.username else '',
                'auth_token': auth_token
            }
            
            logger.info(f"QR-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª QR-–∫–æ–¥ —Å —Ç–æ–∫–µ–Ω–æ–º {auth_token}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ API —Å–∞–π—Ç–∞
            try:
                api_url = f"{API_BASE_URL}/api/telegram-auth"
                payload = {
                    'auth_token': auth_token,
                    'user_data': {
                        'id': user.id,
                        'first_name': user.first_name,
                        'last_name': user.last_name if user.last_name else '',
                        'username': user.username if user.username else ''
                    }
                }
                
                response = requests.post(api_url, json=payload, timeout=5)
                
                if response.status_code == 200:
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {auth_token}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç: {response.status_code}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ API: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update.message.reply_text(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç anonimka.online –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.\n\n"
                f"–í–∞—à Telegram ID: {user.id}"
            )
            
            return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    total_users = 0
    total_ads = 0
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/ads", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                ads_list = data.get('ads', [])
                total_ads = len(ads_list)
                
                # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                unique_users = set()
                for ad in ads_list:
                    if ad.get('tg_id'):
                        unique_users.add(ad.get('tg_id'))
                total_users = len(unique_users)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç auth_token
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    welcome_message = "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n"
    
    if total_users > 0:
        welcome_message += f"üë• {total_users:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        welcome_message += f"üìã {total_ads:,} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
    
    welcome_message += "üåç –°–∞–π—Ç: anonimka.online\n\n"
    welcome_message += "–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ üëá"
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": f"{API_BASE_URL}/webapp/"})]
    ])
    
    try:
        await update.message.reply_text(
            welcome_message,
            reply_markup=keyboard
        )
        logger.info("start: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"start: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")



async def ask_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"ask_city: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(update.message, 'text', None)}")
    if update.message is None or update.message.text is None:
        logger.warning("ask_city: update.message –∏–ª–∏ text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return ConversationHandler.END
    try:
        keyboard = [[city] for city in CITIES] + [["–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"], ["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ:", reply_markup=reply_markup)
        logger.info("ask_city: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return ASK_CITY
    except Exception as e:
        logger.error(f"ask_city: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤: {e}")
        return ConversationHandler.END
        return ASK_CITY
    else:
        return ConversationHandler.END

async def city_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"city_input: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(update.message, 'text', None)}")
    if not update.message or not update.message.text:
        logger.warning("city_input: update.message –∏–ª–∏ text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        if update.message:
            try:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
                logger.info("city_input: –ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞")
            except Exception as e:
                logger.error(f"city_input: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞: {e}")
        return ASK_CITY
    text = update.message.text.strip()
    if text == "–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:")
        return ASK_CITY
    matches = difflib.get_close_matches(text, CITIES, n=5, cutoff=0.3)
    if matches and text not in CITIES:
        keyboard = [[m] for m in matches] + [["–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:", reply_markup=reply_markup)
        return ASK_CITY
    if text not in CITIES:
        CITIES.append(text)
        await update.message.reply_text(f"–ì–æ—Ä–æ–¥ {text} –¥–æ–±–∞–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∫–µ—Ç—É.")
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    context.user_data["city"] = text
    return await ask_gender(update, context)


# –ê–Ω–∫–µ—Ç–∞: –≥–æ—Ä–æ–¥ -> –ø–æ–ª -> –∫–æ–≥–æ –∏—â–µ—Ç -> —Ü–µ–ª—å -> –≤–æ–∑—Ä–∞—Å—Ç -> —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ -> —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def ask_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"ask_gender: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(update.message, 'text', None)}")
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        try:
            keyboard = [[g] for g in GENDERS] + [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–í–∞—à –ø–æ–ª:", reply_markup=reply_markup)
            logger.info("ask_gender: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return ASK_GENDER
        except Exception as e:
            logger.error(f"ask_gender: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–ª–æ–≤: {e}")
            return ConversationHandler.END
    else:
        logger.warning("ask_gender: update.message –∏–ª–∏ text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return ConversationHandler.END

async def ask_target(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"ask_target: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(update.message, 'text', None)}")
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        try:
            context.user_data["gender"] = update.message.text
            logger.info(f"ask_target: –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ–ª: {update.message.text}")
            keyboard = [[t] for t in TARGETS] + [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–ö–æ–≥–æ –∏—â–µ—Ç–µ:", reply_markup=reply_markup)
            logger.info("ask_target: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ü–µ–ª–µ–π –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return ASK_TARGET
        except Exception as e:
            logger.error(f"ask_target: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ü–µ–ª–µ–π: {e}")
            return ConversationHandler.END
    else:
        logger.warning("ask_target: update.message –∏–ª–∏ text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return ConversationHandler.END

async def ask_goal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"ask_goal: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(update.message, 'text', None)}")
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        try:
            context.user_data["target"] = update.message.text
            logger.info(f"ask_goal: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ü–µ–ª—å –ø–æ–∏—Å–∫–∞: {update.message.text}")
            keyboard = [[g] for g in GOALS] + [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:", reply_markup=reply_markup)
            logger.info("ask_goal: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return ASK_GOAL
        except Exception as e:
            logger.error(f"ask_goal: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: {e}")
            return ConversationHandler.END
    else:
        logger.warning("ask_goal: update.message –∏–ª–∏ text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return ConversationHandler.END

async def ask_age_target_from(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        context.user_data["goal"] = update.message.text
        keyboard = [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –∫–æ–≥–æ –∏—â–µ—Ç–µ (–æ—Ç):", reply_markup=reply_markup)
        return 100  # Custom state for age_target_from
    else:
        return ConversationHandler.END

async def ask_age_target_to(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        context.user_data["age_target_from"] = update.message.text
        keyboard = [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–æ–∑—Ä–∞—Å—Ç –∫–æ–≥–æ –∏—â–µ—Ç–µ (–¥–æ):", reply_markup=reply_markup)
        return 101  # Custom state for age_target_to
    else:
        return ConversationHandler.END

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        context.user_data["age_target_to"] = update.message.text
        keyboard = [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=reply_markup)
        return ASK_AGE
    else:
        return ConversationHandler.END

async def ask_body(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        context.user_data["age"] = update.message.text
        keyboard = [[b] for b in BODY_TYPES] + [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–∞—à–µ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=reply_markup)
        return ASK_BODY
    else:
        return ConversationHandler.END

async def ask_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        context.user_data["body"] = update.message.text
        keyboard = [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        return ASK_TEXT
    else:
        return ConversationHandler.END

async def save_ad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"save_ad: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(update.message, 'text', None)}")
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if update.message and update.message.text:
        try:
            context.user_data["text"] = update.message.text
            if update.message.from_user:
                context.user_data["user_id"] = update.message.from_user.id
            ads.append(dict(context.user_data))
            logger.info(f"save_ad: –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {dict(context.user_data)}")
            await update.message.reply_text("–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
            keyboard = [["–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"], ["–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
            logger.info("save_ad: –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"save_ad: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return ConversationHandler.END
    else:
        logger.warning("save_ad: update.message –∏–ª–∏ text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return ConversationHandler.END


async def show_ads(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"show_ads: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {getattr(update.message, 'text', None)}")
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if not update.message:
        logger.warning("show_ads: update.message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return
    try:
        keyboard = [[city] for city in CITIES] + [["–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        context.user_data['filter_step'] = 'city'
        logger.info("show_ads: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"show_ads: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤: {e}")

async def filter_ads(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global logger
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if not update.message or not update.message.text:
        logger.warning("filter_ads: –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return
    text = update.message.text
    logger.info(f"filter_ads: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {text}")

    if text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        keyboard = [["–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"], ["–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        logger.info("filter_ads: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        return

    if text == "–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ":
        logger.info("filter_ads: –ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã –ø–æ –∫–Ω–æ–ø–∫–µ '–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'")
        await ask_city(update, context)
        return

    if text == "–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è":
        logger.info("filter_ads: –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∫–Ω–æ–ø–∫–µ '–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è'")
        await show_ads(update, context)
        return

    if text in CITIES:
        context.user_data['filter_city'] = text
        logger.info(f"filter_ads: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –≥–æ—Ä–æ–¥: {text}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        await show_city_ads(update, context)
        return

async def show_city_ads(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –í–°–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    logger.info(f"show_city_ads: –ü–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {context.user_data.get('filter_city')}")
    if not update.message:
        return
    
    city = context.user_data.get('filter_city')
    city_ads = [ad for ad in ads if ad.get('city') == city]
    
    if city_ads:
        logger.info(f"show_city_ads: –ù–∞–π–¥–µ–Ω–æ {len(city_ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ {city}")
        for idx, ad in enumerate(city_ads):
            ad_text = (
                f"üèô –ì–æ—Ä–æ–¥: {ad.get('city', '')}\n"
                f"üë§ –ü–æ–ª: {ad.get('gender', '')}\n" 
                f"üîç –ò—â—É: {ad.get('target', '')}\n"
                f"üéØ –¶–µ–ª—å: {ad.get('goal', '')}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {ad.get('age', '')}\n"
                f"üí™ –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {ad.get('body', '')}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {ad.get('age_target_from', '')}-{ad.get('age_target_to', '')}\n"
                f"üí¨ –¢–µ–∫—Å—Ç: {ad.get('text', '')}"
            )
            try:
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", callback_data=f"contact_{ads.index(ad)}")]
                ])
                await update.message.reply_text(ad_text, reply_markup=keyboard)
                logger.info(f"show_city_ads: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {idx+1}")
            except Exception as e:
                logger.error(f"show_city_ads: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {idx+1}: {e}")
    else:
        await update.message.reply_text(f"–í –≥–æ—Ä–æ–¥–µ {city} –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.")
        logger.info(f"show_city_ads: –û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [["–ü–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"], ["–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# --- –í–ù–ï filter_ads ---
async def show_filtered_ads(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    def safe_int(val: str, default: int) -> int:
        try:
            return int(val)
        except Exception:
            return default
    if not hasattr(context, 'user_data') or context.user_data is None:
        context.user_data = {}
    if not update.message:
        return
    user_data = context.user_data
    filtered: List[Dict[str, str]] = [ad for ad in ads if
        ad.get('city') == user_data.get('filter_city') and
        ad.get('gender') == user_data.get('filter_gender') and
        ad.get('target') == user_data.get('filter_target') and
        ad.get('goal') == user_data.get('filter_goal') and
        ad.get('age') == user_data.get('filter_age') and
        ad.get('body') == user_data.get('filter_body') and
        (
            user_data.get('filter_age_target_from', '') == '' or
            ad.get('age_target_from', '') == '' or
            safe_int(ad.get('age_target_from', '0'), 0) <= safe_int(user_data.get('filter_age_target_from', '0'), 0)
        ) and
        (
            user_data.get('filter_age_target_to', '') == '' or
            ad.get('age_target_to', '') == '' or
            safe_int(ad.get('age_target_to', '999'), 999) >= safe_int(user_data.get('filter_age_target_to', '999'), 999)
        )
    ]
    if filtered:
        for idx, ad in enumerate(filtered[-10:]):  # type: ignore
            ad_text = (
                f"–ì–æ—Ä–æ–¥: {ad.get('city', '')}\n"
                f"–ü–æ–ª: {ad.get('gender', '')}\n"
                f"–ò—â—É: {ad.get('target', '')}\n"
                f"–¶–µ–ª—å: {ad.get('goal', '')}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {ad.get('age', '')}\n"
                f"–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {ad.get('body', '')}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç –∫–æ–≥–æ –∏—â—É: {ad.get('age_target_from', '')}-{ad.get('age_target_to', '')}\n"
                f"–¢–µ–∫—Å—Ç: {ad.get('text', '')}\n"
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", callback_data=f"contact_{ads.index(ad)}")]
            ])
            await update.message.reply_text(ad_text, reply_markup=keyboard)
    else:
        await update.message.reply_text("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
    user_data['filter_step'] = None

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
async def handle_create_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: create_chat_{ad_id}_{sender_tg_id}
        parts = query.data.split('_')
        ad_id = parts[2]
        sender_tg_id = parts[3]
        receiver_tg_id = query.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        if 'active_chats' not in context.bot_data:
            context.bot_data['active_chats'] = {}
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —á–∞—Ç
        chat_key = f"{sender_tg_id}_{receiver_tg_id}"
        reverse_chat_key = f"{receiver_tg_id}_{sender_tg_id}"
        
        context.bot_data['active_chats'][chat_key] = {
            'sender': sender_tg_id,
            'receiver': receiver_tg_id,
            'ad_id': ad_id,
            'active': True
        }
        
        context.bot_data['active_chats'][reverse_chat_key] = {
            'sender': receiver_tg_id,
            'receiver': sender_tg_id,
            'ad_id': ad_id,
            'active': True
        }
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è)
        await query.message.edit_text(
            "‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é. "
            "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –±–æ—Ç—É, –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /endchat"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=sender_tg_id,
                text="‚úÖ –ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n\n"
                     "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –±–æ—Ç—É, "
                     "–±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.\n\n"
                     "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /endchat"
            )
        except Exception as e:
            logging.error(f"Error notifying sender: {e}")
        
        logging.info(f"Private chat created between {sender_tg_id} and {receiver_tg_id}")
        
    except Exception as e:
        logging.error(f"Error creating private chat: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def handle_view_ad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: view_ad_{ad_id}
        ad_id = query.data.split('_')[2]
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ Supabase
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        await query.message.reply_text(
            f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad_id}\n\n"
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏."
        )
        
    except Exception as e:
        logging.error(f"Error viewing ad: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞
async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç"""
    if not update.message:
        return
    
    user_id = update.message.from_user.id
    
    if 'active_chats' not in context.bot_data:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
        return
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ended = False
    for chat_key in list(context.bot_data['active_chats'].keys()):
        chat = context.bot_data['active_chats'][chat_key]
        if str(chat['sender']) == str(user_id) and chat['active']:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç
            chat['active'] = False
            other_user = chat['receiver']
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            try:
                await context.bot.send_message(
                    chat_id=other_user,
                    text="‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç."
                )
            except Exception as e:
                logging.error(f"Error notifying other user: {e}")
            
            ended = True
    
    if ended:
        await update.message.reply_text("‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
async def relay_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
    if not update.message or not update.message.text:
        return
    
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
    if 'active_chats' not in context.bot_data:
        return
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for chat_key, chat in context.bot_data['active_chats'].items():
        if str(chat['sender']) == str(user_id) and chat.get('active', False):
            receiver_id = chat['receiver']
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await context.bot.send_message(
                    chat_id=receiver_id,
                    text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n\n{update.message.text}"
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                logging.info(f"Message relayed from {user_id} to {receiver_id}")
                return
            except Exception as e:
                logging.error(f"Error relaying message: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ API
        response = requests.get(f"{API_BASE_URL}/api/ads")
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('success'):
                ads = data.get('ads', [])
                total_ads = len(ads)
                
                # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                unique_users = set()
                for ad in ads:
                    if ad.get('tg_id'):
                        unique_users.add(ad.get('tg_id'))
                
                total_users = len(unique_users)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã**

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users:,}**
üìã –û–±—ä—è–≤–ª–µ–Ω–∏–π: **{total_ads:,}**

üåç –°–∞–π—Ç: anonimka.online
"""
                
                await update.message.reply_text(
                    stats_message,
                    parse_mode='Markdown'
                )
                logging.info(f"Stats requested by {update.message.from_user.id}: {total_users} users, {total_ads} ads")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logging.error(f"Error getting stats: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))  # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    app.add_handler(CommandHandler("endchat", end_chat))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    app.add_handler(CallbackQueryHandler(contact_author, pattern=r"^contact_\d+$"))
    app.add_handler(CallbackQueryHandler(handle_create_chat, pattern=r"^create_chat_"))
    app.add_handler(CallbackQueryHandler(handle_view_ad, pattern=r"^view_ad_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, relay_private_message))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, relay_message))

    app.run_polling()
