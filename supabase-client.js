// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_CONFIG = {
    url: 'https://fmgopveobnsapjygobay.supabase.co', // –í–∞—à Project URL
    anonKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZtZ29wdmVvYm5zYXBqeWdvYmF5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE1Nzg5ODEsImV4cCI6MjA3NzE1NDk4MX0.p9DBgPeDDIkQvjYPJQ__8aywLye1hmOxDqe5KcFBRdE'
};

// –ü—Ä–æ—Å—Ç–æ–π Supabase –∫–ª–∏–µ–Ω—Ç (–±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
class SupabaseClient {
    constructor(url, key) {
        this.url = url;
        this.key = key;
        this.headers = {
            'apikey': key,
            'Authorization': `Bearer ${key}`,
            'Content-Type': 'application/json',
            'Prefer': 'return=representation'
        };
    }

    // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    async getAds(filters = {}) {
        let url = `${this.url}/rest/v1/ads?select=*&order=created_at.desc`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if (filters.city) {
            url += `&city=eq.${encodeURIComponent(filters.city)}`;
        }
        if (filters.region) {
            url += `&region=eq.${encodeURIComponent(filters.region)}`;
        }
        if (filters.category) {
            url += `&category=eq.${encodeURIComponent(filters.category)}`;
        }

        const response = await fetch(url, {
            method: 'GET',
            headers: this.headers
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
    }

    // –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    async createAd(adData) {
        const response = await fetch(`${this.url}/rest/v1/ads`, {
            method: 'POST',
            headers: this.headers,
            body: JSON.stringify(adData)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —á–µ—Ä–µ–∑ Edge Function
    async sendEmail(emailData) {
        const response = await fetch(`${this.url}/functions/v1/send-email`, {
            method: 'POST',
            headers: this.headers,
            body: JSON.stringify(emailData)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const supabase = new SupabaseClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testSupabaseConnection() {
    try {
        console.log('üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
        const ads = await supabase.getAds();
        console.log('‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!', ads);
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
        return false;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if (window.location.hostname === 'localhost') {
    document.addEventListener('DOMContentLoaded', testSupabaseConnection);
}