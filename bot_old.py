"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
–¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /start, /stats –∏ /endchat + –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""

import logging
import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8400755138:AAGG-yNvQknz60IXM7xVHeN-xNtzjHFTG1U"
API_BASE_URL = "https://anonimka.online"


# ===== –ö–û–ú–ê–ù–î–´ =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"start: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text if update.message else 'unknown'}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    total_users = 0
    total_ads = 0
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/ads", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                ads_list = data.get('ads', [])
                total_ads = len(ads_list)
                
                # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                unique_users = set()
                for ad in ads_list:
                    if ad.get('tg_id'):
                        unique_users.add(ad.get('tg_id'))
                total_users = len(unique_users)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    welcome_message = "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π!\n\n"
    
    if total_users > 0:
        welcome_message += f"üë• {total_users:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        welcome_message += f"üìã {total_ads:,} –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n"
    
    welcome_message += "üåç –°–∞–π—Ç: anonimka.online\n\n"
    welcome_message += "–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ üëá"
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": f"{API_BASE_URL}/webapp/"})]
    ])
    
    try:
        await update.message.reply_text(
            welcome_message,
            reply_markup=keyboard
        )
        logger.info("start: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"start: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    try:
        response = requests.get(f"{API_BASE_URL}/api/ads", timeout=10)
        
        if response.status_code != 200:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        data = response.json()
        if not data.get('success'):
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        ads_list = data.get('ads', [])
        total_ads = len(ads_list)
        
        # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        unique_users = set()
        for ad in ads_list:
            if ad.get('tg_id'):
                unique_users.add(ad.get('tg_id'))
        
        total_users = len(unique_users)
        
        stats_message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã**

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{total_users:,}**
üìã –û–±—ä—è–≤–ª–µ–Ω–∏–π: **{total_ads:,}**

üåç –°–∞–π—Ç: anonimka.online
"""
        
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        logger.info("stats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"stats: –û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


async def end_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç"""
    if not update.message or not update.message.from_user:
        return
    
    user_id = update.message.from_user.id
    chats = context.bot_data.get('chats', {})
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ended = False
    for (from_id, to_id), active in list(chats.items()):
        if active and (user_id == from_id or user_id == to_id):
            chats[(from_id, to_id)] = False
            ended = True
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            try:
                await context.bot.send_message(
                    from_id,
                    "üíî –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!"
                )
                await context.bot.send_message(
                    to_id,
                    "üíî –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!"
                )
            except Exception as e:
                logger.error(f"end_chat: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    if ended:
        await update.message.reply_text("‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
    
    logger.info(f"end_chat: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç")


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =====

async def handle_create_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    if not query or not query.data or not query.from_user:
        return
    
    await query.answer()
    
    try:
        # –§–æ—Ä–º–∞—Ç: create_chat_AD_ID_AUTHOR_TG_ID
        parts = query.data.split('_')
        if len(parts) < 5:
            return
        
        ad_id = parts[2]
        author_tg_id = int(parts[3])
        sender_tg_id = query.from_user.id
        
        if sender_tg_id == author_tg_id:
            await query.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–∏ —Å–µ–±–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        if 'chats' not in context.bot_data:
            context.bot_data['chats'] = {}
        
        context.bot_data['chats'][(sender_tg_id, author_tg_id)] = True
        context.bot_data['chats'][(author_tg_id, sender_tg_id)] = True
        
        await query.message.reply_text(
            "‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç.\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /endchat"
        )
        
        await context.bot.send_message(
            author_tg_id,
            f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é #{ad_id}!\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
        )
        
        logger.info(f"handle_create_chat: –°–æ–∑–¥–∞–Ω —á–∞—Ç –º–µ–∂–¥—É {sender_tg_id} –∏ {author_tg_id}")
        
    except Exception as e:
        logger.error(f"handle_create_chat: –û—à–∏–±–∫–∞: {e}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def relay_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
    if not update.message or not update.message.text or not update.message.from_user:
        return
    
    user_id = update.message.from_user.id
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
    chats = context.bot_data.get('chats', {})
    
    for (from_id, to_id), active in chats.items():
        if active and user_id == from_id:
            try:
                await context.bot.send_message(
                    to_id,
                    f"üí¨ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message_text}"
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                logger.info(f"relay_private_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {from_id} –∫ {to_id}")
                return
            except Exception as e:
                logger.error(f"relay_private_message: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
    
    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    logger.debug(f"relay_private_message: –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


# ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("endchat", end_chat))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    app.add_handler(CallbackQueryHandler(handle_create_chat, pattern=r"^create_chat_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, relay_private_message))
    
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    app.run_polling()


if __name__ == "__main__":
    main()
