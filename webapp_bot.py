import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "8400755138:AAGG-yNvQknz60IXM7xVHeN-xNtzjHFTG1U"
WEBAPP_URL = "https://whish.online/"  # Mini App –Ω–∞ –≤–∞—à–µ–º –¥–æ–º–µ–Ω–µ

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
ads: List[Dict[str, str]] = []
chats: Dict[tuple, bool] = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info(f"start: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url=WEBAPP_URL)
        )],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    welcome_text = """
üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—É—é –¥–æ—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π!</b>

üé≠ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ  
‚Ä¢ –û–±—â–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ

üöÄ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
    """
    
    try:
        await update.message.reply_text(
            welcome_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        logger.info("start: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"start: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info(f"web_app_data: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        web_app_data = json.loads(update.effective_message.web_app_data.data)
        action = web_app_data.get('action')
        
        logger.info(f"web_app_data: –î–µ–π—Å—Ç–≤–∏–µ - {action}")
        
        if action == 'createAd':
            await handle_create_ad(update, context, web_app_data['data'])
        elif action == 'getAds':
            await handle_get_ads(update, context)
        elif action == 'getAdsByCity':
            await handle_get_ads_by_city(update, context, web_app_data['city'])
        else:
            logger.warning(f"web_app_data: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - {action}")
            
    except Exception as e:
        logger.error(f"web_app_data: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

async def handle_create_ad(update: Update, context: ContextTypes.DEFAULT_TYPE, ad_data: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    logger.info(f"create_ad: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ad_data['user_id'] = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        ads.append(ad_data)
        
        logger.info(f"create_ad: –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {ad_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = f"""
‚úÖ <b>–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!</b>

üèô <b>–ì–æ—Ä–æ–¥:</b> {ad_data['city']}
üë§ <b>–ü–æ–ª:</b> {ad_data['gender']}
üîç <b>–ò—â–µ—Ç–µ:</b> {ad_data['target']}
üéØ <b>–¶–µ–ª—å:</b> {ad_data['goal']}

üìä –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(ads)}
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", 
                web_app=WebAppInfo(url=f"{WEBAPP_URL}?screen=browse")
            )],
            [InlineKeyboardButton(
                "üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ", 
                web_app=WebAppInfo(url=f"{WEBAPP_URL}?screen=create")
            )]
        ])
        
        await update.message.reply_text(
            confirmation_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"create_ad: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")

async def handle_get_ads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    logger.info(f"get_ads: –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    
    try:
        if not ads:
            await update.message.reply_text("""
üòî <b>–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>

–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!
            """, parse_mode='HTML')
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:</b>

üìù –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(ads)}
üèô –ì–æ—Ä–æ–¥–æ–≤: {len(set(ad['city'] for ad in ads))}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(set(ad['user_id'] for ad in ads))}

–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
        """
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"get_ads: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")

async def handle_get_ads_by_city(update: Update, context: ContextTypes.DEFAULT_TYPE, city: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É"""
    logger.info(f"get_ads_by_city: –ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
    
    try:
        city_ads = [ad for ad in ads if ad['city'] == city]
        
        if not city_ads:
            await update.message.reply_text(f"""
üòî <b>–í –≥–æ—Ä–æ–¥–µ {city} –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b>

–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ!
            """, parse_mode='HTML')
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥—É
        stats_text = f"""
üèô <b>–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ {city}:</b>

üìù –ù–∞–π–¥–µ–Ω–æ: {len(city_ads)}
üë® –ú—É–∂—á–∏–Ω: {len([ad for ad in city_ads if ad['gender'] == '–ú—É–∂—á–∏–Ω–∞'])}
üë© –ñ–µ–Ω—â–∏–Ω: {len([ad for ad in city_ads if ad['gender'] == '–ñ–µ–Ω—â–∏–Ω–∞'])}

–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã—à–µ.
        """
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"get_ads_by_city: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É: {e}")

async def handle_contact_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–≤—è–∑—å —Å –∞–≤—Ç–æ—Ä–∞–º–∏"""
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "contact_123")
        _, ad_index = query.data.split('_')
        ad_index = int(ad_index)
        
        if ad_index >= len(ads):
            await query.message.reply_text("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        ad = ads[ad_index]
        user_id = query.from_user.id
        author_id = ad['user_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å–∞–º —Å —Å–æ–±–æ–π
        if user_id == author_id:
            await query.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–±–æ–π")
            return
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        chat_key = (user_id, author_id)
        chats[chat_key] = True
        
        logger.info(f"contact_request: –°–æ–∑–¥–∞–Ω —á–∞—Ç –º–µ–∂–¥—É {user_id} –∏ {author_id}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await context.bot.send_message(
            user_id,
            f"""
‚úÖ <b>–°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.

üèô –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –≥–æ—Ä–æ–¥–∞: {ad['city']}
            """,
            parse_mode='HTML'
        )
        
        await context.bot.send_message(
            author_id,
            f"""
üì¨ <b>–ö—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –≤–∞—à–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º!</b>

–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç, –∏ —è –ø–µ—Ä–µ–¥–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è.

üèô –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥–µ: {ad['city']}
            """,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"contact_request: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤—è–∑–∏: {e}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏")

async def handle_message_relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return
        
    user_id = update.effective_user.id
    message_text = update.message.text
    
    logger.info(f"message_relay: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (from_id, to_id), active in chats.items():
        if not active:
            continue
            
        if user_id == from_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    to_id,
                    f"üí≠ <b>–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{message_text}",
                    parse_mode='HTML'
                )
                await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
                logger.info(f"message_relay: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ—Ç {from_id} –∫ {to_id}")
                return
            except Exception as e:
                logger.error(f"message_relay: –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
                
        elif user_id == to_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    from_id,
                    f"üí≠ <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–≤–µ—Ç:</b>\n\n{message_text}",
                    parse_mode='HTML'
                )
                await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                logger.info(f"message_relay: –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç {to_id} –∫ {from_id}")
                return
            except Exception as e:
                logger.error(f"message_relay: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞")
                return

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

üé≠ <b>–ê–Ω–æ–Ω–∏–º–Ω–∞—è –¥–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</b> - —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤.

üîπ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
3. –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏
4. –û–±—â–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞

üîπ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π

üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –û–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ
‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç

‚ö†Ô∏è <b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã
‚Ä¢ –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –∑–∞–∫–æ–Ω—ã –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã
    """
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(
            "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url=WEBAPP_URL)
        )]
    ])
    
    await update.message.reply_text(
        help_text,
        parse_mode='HTML',
        reply_markup=keyboard
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>

üìù –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(ads)}
üèô –ì–æ—Ä–æ–¥–æ–≤: {len(set(ad['city'] for ad in ads)) if ads else 0}
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(set(ad['user_id'] for ad in ads)) if ads else 0}
üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {sum(1 for active in chats.values() if active)}

üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:</b>
{get_popular_cities()}

üéØ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤:</b>
{get_popular_goals()}
    """
    
    await update.message.reply_text(stats_text, parse_mode='HTML')

def get_popular_cities():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    if not ads:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    city_counts = {}
    for ad in ads:
        city = ad['city']
        city_counts[city] = city_counts.get(city, 0) + 1
    
    sorted_cities = sorted(city_counts.items(), key=lambda x: x[1], reverse=True)[:5]
    return '\n'.join([f"‚Ä¢ {city}: {count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π" for city, count in sorted_cities])

def get_popular_goals():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    if not ads:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
    goal_counts = {}
    for ad in ads:
        goal = ad['goal']
        goal_counts[goal] = goal_counts.get(goal, 0) + 1
    
    sorted_goals = sorted(goal_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    return '\n'.join([f"‚Ä¢ {goal}: {count}" for goal, count in sorted_goals])

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å Web App...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∫–Ω–æ–ø–æ–∫)
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(handle_contact_request, pattern=r"^contact_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç–∞)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_relay))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()